#include <kernel.h>

char fox_ascii_art[1209] = "                                                                    ,-,\n                                                              _.-=;~ /_\n                                                           _-~   '     ;.\n                                                       _.-~     '   .-~-~`-._\n                                                 _.--~~:.             --.____88\n                               ____.........--~~~. .' .  .        _..-------~~\n                      _..--~~~~               .' .'             ,'\n                  _.-~                        .       .     ` ,'\n                .'                                    :.    ./\n              .:     ,/          `                   ::.   ,'\n            .:'     ,(            ;.                ::. ,-'\n           .'     ./'.`.     . . /:::._______.... _/:.o/\n          /     ./'. . .)  . _.,'               `88;?88|\n        ,'  . .,/'._,-~ /_.o8P'                  88P ?8b\n     _,'' . .,/',-~    d888P'                    88'  88|\n _.'~  . .,:oP'        ?88b              _..--- 88.--'8b.--..__\n :     ...' 88o __,------.88o ...__..._.=~- .    `~~   `~~      ~-._ Seal _\n `.;;;:='    ~~            ~~~                ~-    -       -   -\n";

void help_cmd(){
  printf("Fox v0.0.1 shell.\n");
  printf("help - Display this help page.\n");
  printf("shutdown - Shut the computer down. You can also press [ESC]!\n");
  printf("? - Display this help page.\n");
  return;  
}

void fox_cmd(){
  printf("You have found the secret fox ASCII art! :D Enjoy!\n");
  settextcolor(brown, black);
  puts(fox_ascii_art); // puts, because malloc.. lel
  settextcolor(shell_foreground_colour, shell_background_colour);
  return;
}


void vgatest_cmd(){
	printf("\n");
    char hex[16] = {
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
    };
    char * names[16] = {
    	"black", "blue", "green", "cyan", "red", "magenta", "brown", "lightgray",
    	"gray", "lightblue", "lightgreen", "turquoise", "lightred", "pink", "yellow", "white"
	};
	int i,j;
    for (i = 0; i < 16; i++)
    {
      for (j = 0; j < 16; j++)
      {
        settextcolor((unsigned char)i, (unsigned char)j);
        putc(hex[i]);
        putc(hex[j]);
        settextcolor(white, black);
        putc(' ');
      }
      settextcolor((unsigned char)(i == 0 ? 15 : 0), (unsigned char)j);
      puts(names[i]);
      putc('\n');
    }
    return;
}

void clear_cmd(){
  set_csr_xy(0, 0);
  int i;
  for (i = 0; i <= 80*25; i++)
  {
    printf(" ");
  }
  set_csr_xy(0, 0);
  return;
}

void color_cmd(list_t * argv, int argc){
	int fg;
	int bg;
	bool fgdetected = false;
	bool bgdetected = false;
	char * names[16] = {
		"black", "blue", "green", "cyan", "red", "magenta", "brown", "lightgray",
    	"gray", "lightblue", "lightgreen", "turquoise", "lightred", "pink", "yellow", "white"
	};
	// printf((char *)list_get_node_by_index(argv,0)->val);
	// printf((char *)list_get_node_by_index(argv,1)->val);
	int i;
	for (i = 0; i < 16; ++i)
	{
		if(strcmp((char *)list_get_node_by_index(argv,0)->val,names[i])==0){
			fg = i;
			fgdetected = true;
		}
		if(strcmp((char *)list_get_node_by_index(argv,1)->val,names[i])==0){
			bg = i;
			bgdetected = true;
		}
	}
	if(!fgdetected){
		fg = atoi_hex((char *)list_get_node_by_index(argv,0)->val);
	}
	if(!bgdetected){
		bg = atoi_hex((char *)list_get_node_by_index(argv,1)->val);
	}

	shell_foreground_colour = fg % 16;
	shell_background_colour = bg % 16;
	settextcolor(fg%16,bg%16);
	clear_cmd();
}

void time_cmd(){
  printf("time since boot (seconds):%f\n\n",timer_get_time_since_boot());
}

void fs_test_cmd(){
	ls("");
	print_vfstree();
	// vfs_mkdir("hey",10);
	// vfs_mkdir("hey",10);
	// print_vfstree();
	// vfs_db_listdir("hey");
}

void ls_cmd(list_t * argv, int argc){
	if(argc == 0){
		list_t * dirs = ls(".");
		foreach(i, dirs){
			printf("%s ",i->val);
		}
		free(dirs);
	}else{		
		list_t * dirs = ls((char *)list_get_node_by_index(argv,0)->val);
		foreach(i, dirs){
			printf("%s ",i->val);
		}
		free(dirs);
	}
	printf("\n");
}

void cat_cmd(list_t * argv, int argc){
	char * dirs = cat((char *)list_get_node_by_index(argv,0)->val);
	printf(dirs);
	printf("\n");
	free(dirs);
}

void cd_cmd(list_t * argv, int argc){
	cd((char *)list_get_node_by_index(argv,0)->val);
}

void pushd_cmd(list_t * argv, int argc){
	pushd((char *)list_get_node_by_index(argv,0)->val);
}

void popd_cmd(){
	popd();
}

void minesweeper_cmd()
{
	clear_cmd();
	settextcolor(cyan, black); // turquoise text, black background
	printf("Minesweeper v0.1");
}

void setup_commands(){
	kcll_register_command((command){"help",0,{help_cmd}});
	kcll_register_command((command){"?",0,{help_cmd}});
	kcll_register_command((command){"shutdown",0,{shutdown}});
	kcll_register_command((command){"reboot",0,{reboot}});
	kcll_register_command((command){"fox",0,{fox_cmd}});
	kcll_register_command((command){"clear",0,{clear_cmd}});
	kcll_register_command((command){"time",0,{time_cmd}});

	kcll_register_command((command){
		"fs",
		0,
		{fs_test_cmd}
	});

	kcll_register_command((command){"ls",0,{ls_cmd},1});
	kcll_register_command((command){"cat",1,{cat_cmd},});
	kcll_register_command((command){"cd",1,{cd_cmd},});
	kcll_register_command((command){"pushd",1,{pushd_cmd},});
	kcll_register_command((command){"popd",0,{popd_cmd},});
	kcll_register_command((command){"color",2,{color_cmd}});
	kcll_register_command((command){"colors",0,{vgatest_cmd}});
	
	kcll_register_command((command){
		"minesweeper",
		0,
		{minesweeper_cmd}
	});
}
